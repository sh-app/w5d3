c
members
c
source_options.primary_key
join_table_name
source_options.foreign_key
table_name
self_table
c
s
c
through_options.primary_key
source_options.foreign_key
through_options.foreign_key
self.id
self.class.table_name
through_options
through_options.foreign_key
self.class
self
self.foreign_key
through_options.primary_key
self
self.id
through_name
name
self.class.assoc_options[:human].primary_key
self.class.assoc_options[:human]
self.class.assoc_options
self.class.assoc_options.foreign_key
source_options.primary_key
through_options.foreign_key
through_options.class_name.constantize.table_name
table_name.constantize.table_name
table_name.constantize
table_name.tableize
table_name
c
"#{:owner_id}"
#{:owner_id}
through_options.primary_key
through_options.foreign_key
self.class.assoc_options.values.foreign_key
self.class.assoc_options
self.class.assoc_options[:foreign_key]
self.class.assoc_options[foreign_key]
self.class.foreign_key
self.class.assoc_options
self.class.assoc_options.foreign_key
through_options.self
through_option.self
self.class.table_name
@table_name
table
table_name
through_options
through_option
through_options.class_name.pluralize
c
s
sw
c
self.assoc_options
self.class.assoc_options
through_options
through_options.model_class.assoc_options[source_name]
c
s
source_options
through_options
c
source_options
"Humans".pluralize
through_options.class_name
through_options.model_class
through_options.model_class.assoc_options[source_name]
c
self.class.assoc_options[through_name]
c
self.class.assoc_options
assoc_options
source_name
through_name
name
c
assoc_options
c
assoc_options[through_name]
assoc_options
c
@assoc_options[through_name]
assoc_options[through_name]
c
self.id
self
primary_key
self
self.send(:primary_key)
self.send(primary_key)
self.send(foreign_key)
options.send(:foreign_key)
options[:foreign_key]
foreign_key
model_class
c
Cat.where(:owner_id => 3)
Cat.where(owner_id=3)
:foreign_key
foreign_key:
foreign_key
Cat.where(owner_id: 3)
Cat.where("owner_id":3)
Cat.where("owner_id" : 3)
Cat.where("owner_id" = 3)
foreign_key.to_s
Cat.where(foreign_key: foreign_key)
options.foreign_key
Cat.where(foreign_key)
foreign_key
Cat.where(owner_id: 3)
model_class
model_clas
c
options.foreign_key
options
foreign_key
c
s
c
s
@foreign_key
s
c
self.name
self
class
self.class
self.class_name
self_class_name
c
self_class_name
options.foreign_key
foreign_key
c
@foreign_key
s
@foreign_key
c
s
c
@foreign_key
foreign_key
self_class_name.to_s.underscore + '_id'.to_sym
self_class_name.to_s.underscore + '_id'
self_class_name.to_s.underscore + 'id'
self_class_name.to_s.underscore
self_class_name.to_s
self_class_name
options
s
options
self_class_name
name
options
c
options[:foreign_key]
options
foreign_key
model_class
options.foreign_key
foreign_key
c
options
@foreign_key
n
name
@foreign_key
n
options
c
self.send(foreign_key)
n
self.send(foreign_key)
self
options.send(:model_class)
options.send(:foreign_key)
options
name
c
s
n
c
up
n
name
options
n
c
options
model_class
Human.columns
Human.class.columns
model_class.where(id: 1)
mode_class.where(id: 1)
model_class
options
foreign_key
model_class
c
options.send(:model_class)
c
:foreign key
House.where(id: 1)
House.send(:where(id: 1))
House.send(:all)
model_class.send(:all)
options.send(:model_class)
options[:foreign_key]
options.send(:foreign_key)
send(options, foreign_key)
foreign_key
options.send(foreign_key)
options
c
sc
s
model_class.send(where(id: foreign_key))
options.model_class
options
c
name.to_s.camelcase
name
options[:primary_key]
options[:foreign_key]
name.to_s + '_id'
name
exit
cats.first
s
cat.first
cats
n
s
values
keys
exit
keys
s
values
s
params.keys
params.values
values
params
exit
params.keys
