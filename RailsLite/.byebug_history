c
@flash
c
@flash
@now
c
@now.empty?
@now
c
@now
c
@flash
@now
c
s
self
c
s
@flash
c
@flash[key]
now
quit
exit
c
req
Flash.now
@flash
c
req
c
cc
c
s
req
cookies
s
req.cookies
s
req.cookies
req
req.cookies
c
action_name
c
s
@params
params
s
params
s
req.params
req
s
controller.invoke_action
controller_class.new(req, res, route_params)
controller_class
controller_class.new
controller
route_params
s
route_params
s
regex.match(req.path)
req.path
regex
s
pattern
regex
c
route.run(req, res)
route.run
c
s
req.path
req.params
route
c
req.params
params
controller.params
c
req.request_method
req.path
c
JSON.parse(req.cookies['_rails_lite_app'])
SON.parse(req.cookies['_rails_lite_app'])
JSON.parse(req.cookies)
req.cookies["_rails_lite_app"]
req.cookies
c
res
c
s
@cookie
Acookie
@cookie["count"] = 1
cookie.to_json
@cookie
s
req.cookies
@cookie[:name]
@cookie.name
@cookie
s
@session
s
c
s
res.set_cookie(cookie.to_json)
res.set_cookie
cookie.to_json
s
@cookie
s
@session
s
@session
c
s
cookie.to_json
@cookie
s
@cookie
session.store_session(res)
store_session(res)
res
@session
c
s
@cookie
s
@session
s
c
ERB.new(template)
template
path_to_template
eval(self.instance_variables.binding)
eval(self.binding)
eval(binding)
eval(e)
e
e = ERB.new(template)
e = _
ERB.new(template)
template
content
c
res
c
res.status
res.status = 300
res.status
@status
@res
c
env['PATH_INFO']
req.params
req.header
env
req.headers
req.each_header({|h| puts h}
